<?php
/**
 * @file
 * Adds unique artisinal integers to nodes.
 */

/**
 * Implements hook_help.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function artisinal_help($path, $arg) {
	switch ($path) {
	    case "admin/help#artisinal":
	      return '<p>'.  t("Adds unique artisinal integers to nodes") .'</p>';
	      break;
	  }
}

/**
 * Implements hook_field_info().
 */
function artisinal_field_info() {
  return array(
    'artisinal_integer' => array(
      'label' => t('Artisinal Integer'),
      'description' => t('This field stores a unique artisinal number in the database as an integer.'),
      'default_widget' => 'artisinal',
      'default_formatter' => 'artisinal_integer',
    ),
  );
}


/**
 * Implements hook_field_settings_form().
 * There are currently no field settings for this.
 */
function artisinal_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 * This does nothing for the moment
 */
function artisinal_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();

  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function artisinal_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function artisinal_field_formatter_info() {
  return array(
    'artisinal_integer' => array(
      'label' => t('Default'),
      'field types' => array('artisinal_integer'),
      'settings' =>  array(
        'scale' => 0,
      ),
    ),
  );
}


/**
 * Implements hook_field_widget_info().
 */
function artisinal_field_widget_info() {
  return array(
    'artisinal' => array(
      'label' => t('Text field'),
      'field types' => array('artisinal_integer'),
    ),
  );
}


/**
 * Implements hook_field_widget_error().
 */
function artisinal_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}
